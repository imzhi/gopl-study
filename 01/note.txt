1.1 节
go 编译型语言
go run 编译一个或多个源文件，链接库文件，运行最终生成的可执行文件。
原生支持 unicode
恰当导入需要的包，不能缺少了必要的包或导入了不需要的包

1.2 节
变量会在声明时直接初始化
如变量没有初始化，则被隐式地赋予其类型的零值（zero value），数值类型是 0，字符串类型是空字符串 ""。
:= 是短变量声明的一部分，定义一个或多个变量根据初始值赋予适当类型
i++ 是语句，不是表达式，j = i++ 非法，--i 也非法
_ 是空标识符，用于任何语法需要变量名但程序逻辑不需要时

1.3 节
map 存储键值对，键可以是能用 == 运算符比较的任意类型，值可以是任意类型
内置函数 make 创建空 map
map 迭代顺序是随机的
ReadFile 函数返回一个字节切片（byte slice），必须转换为 string，才能用 strings.Split 分割
bufio.Scanner、ioutil.ReadFile 和 ioutil.WriteFile 都使用 *os.File 的 Read 和 Write 方法

1.4 节
[]color.Color{...} 和 gif.GIF{...} 是复合声明，前者是 slice 切片，后者是 struct 结构体
struct 是一组值或者叫字段的集合

1.5 节
resp.Body.Close关闭resp的Body流，防止资源泄露

1.6 节
goroutine 是函数的并发执行方式，channel 用来在 goroutine 之间进行参数传递
main 函数运行在 goroutine
go function 表示创建新的 goroutine，并在新的 goroutine 中执行函数
当一个 goroutine 尝试在一个 channel 上做 send 或者 receive 操作时，这个 goroutine 会阻塞在调用处，直到另一个 goroutine 往这个 channel 里写入或者接收值，这样两个 goroutine 才会继续执行 channel 操作之后的逻辑（没看懂）

1.7 节
fmt.Fprintf 标准输出流
解决竞态条件：每次修改变量最多只能有一个 goroutine

1.8 节
switch 不需要写 break；增加了 falltrough 顺序执行下去
switch 可以不带操作对象，默认用 true 代替
指针是可见的内存地址，& 操作符返回变量的内存地址，* 操作符获取指针指向的变量内容，不能进行指针运算
方法可以和任意命令类型关联
接口是抽象类型，只需要关注提供的方法
