2.1 节
命令规则：以字母或下划线开头，跟任何字母、数字或下划线
关键字 25 个（不能命名）：
break      default       func     interface   select
case       defer         go       map         struct
chan       else          goto     package     switch
const      fallthrough   if       range       type
continue   for           import   return      var
预定义名字 30 个（可以命名）：
内建常量: true false iota nil
内建类型: int int8 int16 int32 int64
          uint uint8 uint16 uint32 uint64 uintptr
          float32 float64 complex128 complex64
          bool byte rune string error
内建函数: make len cap new append copy close delete
          complex real imag
          panic recover
名字以大写字母开头，并定义在函数外部，则可以被外部包访问（包名一般是小写，如 fmt.Println）
如果名字作用域较大，生命周期较长，用长名字更好
名字通常以驼峰式命名

2.2 节
四种类型声明语句：var, const, type, func
包一级声明语句声明的名字可在整个包对应的每个源文件中访问

2.3 节
var 声明语句创建变量
var 变量名字 类型=表达式
“类型”或“=表达式”可以省略其中一个
数值零值是 0，布尔零值是 false，字符串零值是空字符串，接口或引用（包括 slice、map、chan 和函数）零值是 nil
零值初始化机制确保变量总有值
2.3.1
简短声明变量的形式：“名字:=表达式”
var 形式的声明用于显示指定变量类型地方，或因为变量稍后会被重新赋值而初始化无关紧要的地方
“:=” 是一个变量声明语句，“=” 是一个变量赋值操作
简短变量声明左边的变量可能并不是全部都是刚刚声明的。如果有一些已经在相同的词法域声明过了，那么简短变量声明语句对这些已经声明过的变量就只有赋值行为了
简短变量声明语句中必须至少要声明一个新的变量
f, err := os.Open(infile)
// ...
f, err := os.Create(outfile) // compile error: no new variables
简短变量声明语句只有对已经在同级词法域声明过的变量才和赋值操作语句等价，如果变量是在外部词法域声明的，那么简短变量声明语句将会在当前词法域重新声明一个新的变量
2.3.2
一个变量对应一个保存了变量对应类型值的内存空间
一个指针的值是另一个变量的地址
一个指针对应变量在内存中的存储位置
不是每一个值都会有一个内存地址，但是对于每一个变量必然有对应的内存地址
通过指针，我们可以直接读或更新对应变量的值，而不需要知道该变量的名字
var x int，&x 表达式将产生一个指向该整数变量的指针，对应的数据类型是 *int，被称之为“指向 int 类型的指针”
指针的零值是 nil
返回函数中局部变量的地址是安全的
对一个变量取地址，或者复制指针，都是为原变量创建了新的别名
2.3.3
表达式 new(T) 创建一个 T 类型的匿名变量，初始化为 T 类型的零值，返回变量地址，返回的指针类型 *T
new 函数类似一种语法糖
func newInt() *int {
    return new(int)
}
func newInt() *int {
    var dummy int
    return &dummy
}
上面两个函数是一样的行为
如果两个类型都是空的，类型的大小是 0，如 struct{} 和 [0]int, 可能有相同的地址（依赖具体的语言实现）
谨慎使用大小为 0 的类型，类型的大小为 0 的话，可能导致自动垃圾回收器有不同行为，具体请查看 runtime.SetFinalizer 函数相关文档
func SetFinalizer（http://docs.studygolang.com/pkg/runtime/#SetFinalizer）

func SetFinalizer(obj interface{}, finalizer interface{})
SetFinalizer sets the finalizer associated with obj to the provided finalizer function. When the garbage collector finds an unreachable block with an associated finalizer, it clears the association and runs finalizer(obj) in a separate goroutine. This makes obj reachable again, but now without an associated finalizer. Assuming that SetFinalizer is not called again, the next time the garbage collector sees that obj is unreachable, it will free obj.

SetFinalizer(obj, nil) clears any finalizer associated with obj.

The argument obj must be a pointer to an object allocated by calling new, by taking the address of a composite literal, or by taking the address of a local variable. The argument finalizer must be a function that takes a single argument to which obj's type can be assigned, and can have arbitrary ignored return values. If either of these is not true, SetFinalizer may abort the program.

Finalizers are run in dependency order: if A points at B, both have finalizers, and they are otherwise unreachable, only the finalizer for A runs; once A is freed, the finalizer for B can run. If a cyclic structure includes a block with a finalizer, that cycle is not guaranteed to be garbage collected and the finalizer is not guaranteed to run, because there is no ordering that respects the dependencies.

The finalizer is scheduled to run at some arbitrary time after the program can no longer reach the object to which obj points. There is no guarantee that finalizers will run before a program exits, so typically they are useful only for releasing non-memory resources associated with an object during a long-running program. For example, an os.File object could use a finalizer to close the associated operating system file descriptor when a program discards an os.File without calling Close, but it would be a mistake to depend on a finalizer to flush an in-memory I/O buffer such as a bufio.Writer, because the buffer would not be flushed at program exit.

It is not guaranteed that a finalizer will run if the size of *obj is zero bytes.

It is not guaranteed that a finalizer will run for objects allocated in initializers for package-level variables. Such objects may be linker-allocated, not heap-allocated.

A finalizer may run as soon as an object becomes unreachable. In order to use finalizers correctly, the program must ensure that the object is reachable until it is no longer required. Objects stored in global variables, or that can be found by tracing pointers from a global variable, are reachable. For other objects, pass the object to a call of the KeepAlive function to mark the last point in the function where the object must be reachable.

For example, if p points to a struct that contains a file descriptor d, and p has a finalizer that closes that file descriptor, and if the last use of p in a function is a call to syscall.Write(p.d, buf, size), then p may be unreachable as soon as the program enters syscall.Write. The finalizer may run at that moment, closing p.d, causing syscall.Write to fail because it is writing to a closed file descriptor (or, worse, to an entirely different file descriptor opened by a different goroutine). To avoid this problem, call runtime.KeepAlive(p) after the call to syscall.Write.

A single goroutine runs all finalizers for a program, sequentially. If a finalizer must run for a long time, it should do so by starting a new goroutine.
new 是预定义函数，并不是关键字，可以将 new 重新定义为别的类型
2.3.4
包一级声明的变量的生命周期和整个程序的运行周期一致
局部变量的声明周期：创建新变量的声明语句开始，直到该变量不再被引用为止，然后变量的存储空间可能被回收
函数的参数变量和返回值变量都是局部变量。它们在函数每次被调用的时候创建
自动垃圾收集器实现思路：从每个包级的变量和每个当前运行函数的每一个局部变量开始，通过指针或引用的访问路径遍历，是否可以找到该变量。如果不存在这样的访问路径，那么说明该变量是不可达的，也就是说它是否存在并不会影响程序后续的计算结果
编译器会自动选择在栈上还是在堆上分配局部变量的存储空间，并不是由用 var 还是 new 声明变量的方式决定
并不需为了编写正确的代码而要考虑变量的逃逸行为，要记住的是，逃逸的变量需要额外分配内存，同时对性能的优化可能会产生细微的影响

2.4 节
自增和自减是语句，而不是表达式，因此 x = i++ 之类的表达式是错误的
map 查找、类型断言、通道接收在赋值语句的右边，可能会产生两个结果，有一个额外的布尔值表示操作是否成功
v, ok = m[key]             // map lookup
v, ok = x.(T)              // type assertion
v, ok = <-ch               // channel receive
map 查找、类型断言或通道接收出现在赋值语句的右边时，并不一定是产生两个结果，也可能只产生一个结果。对于值产生一个结果的情形，map查找失败时会返回零值，类型断言失败时会发送运行时panic异常，通道接收失败时会返回零值（阻塞不算是失败）
v = m[key]                // map查找，失败时返回零值
v = x.(T)                 // type断言，失败时panic异常
v = <-ch                  // 管道接收，失败时返回零值（阻塞不算是失败）

_, ok = m[key]            // map返回2个值
_, ok = mm[""], false     // map返回1个值
_ = mm[""]                // map返回1个值
赋值语句左边的变量和右边最终的求到的值必须有相同的数据类型
nil可以赋值给任何指针或引用类型的变量
对于任何类型的值的相等比较(== 或 !=），第二个值必须是对第一个值类型对应的变量是可赋值的

2.5 节
对于每一个类型 T，都有一个对应的类型转换操作 T(x)，用于将 x 转为 T 类型，只有当两个类型的底层基础类型相同时，才允许这种转型操作，或者是两者都是指向相同底层结构的指针类型，这些转换只改变类型而不会影响值本身
运行时不会发生转换失败的错误，错误只会发生在编译阶段
类型的方法集：命名类型还可以为该类型的值定义一组关联的函数集合

2.6 节
作用域和生命周期不同
声明语句的作用域对应的是一个源代码的文本区域；它是一个编译时的属性。一个变量的生命周期是指程序运行时变量存在的有效时间段，在此时间区域内它可以被程序的其他部分引用；是一个运行时的概念
for语句创建了两个词法域：花括弧包含的是显式的部分是for的循环体部分词法域，另外一个隐式的部分则是循环的初始化部分，比如用于迭代变量i的初始化。隐式的词法域部分的作用域还包含条件测试部分和循环后的迭代部分（i++），当然也包含循环体词法域。
